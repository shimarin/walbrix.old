diff --git a/grub-core/disk/loopback.c b/grub-core/disk/loopback.c
index cdf9123fa..45855545e 100644
--- a/grub-core/disk/loopback.c
+++ b/grub-core/disk/loopback.c
@@ -31,6 +31,7 @@ struct grub_loopback
 {
   char *devname;
   grub_file_t file;
+  grub_size_t offset;
   struct grub_loopback *next;
   unsigned long id;
 };
@@ -43,6 +44,7 @@ static const struct grub_arg_option options[] =
     /* TRANSLATORS: The disk is simply removed from the list of available ones,
        not wiped, avoid to scare user.  */
     {"delete", 'd', 0, N_("Delete the specified loopback drive."), 0, 0},
+    {"offset1m", 'o', 0, N_("Apply 1MiB offset"), 0, 0},
     {0, 0, 0, 0, 0, 0}
   };
 
@@ -81,6 +83,8 @@ grub_cmd_loopback (grub_extcmd_context_t ctxt, int argc, char **args)
   grub_file_t file;
   struct grub_loopback *newdev;
   grub_err_t ret;
+  grub_size_t offset = 0;
+
 
   if (argc < 1)
     return grub_error (GRUB_ERR_BAD_ARGUMENT, "device name required");
@@ -89,6 +93,9 @@ grub_cmd_loopback (grub_extcmd_context_t ctxt, int argc, char **args)
   if (state[0].set)
       return delete_loopback (args[0]);
 
+  if (state[1].set)
+    offset = 1024 * 1024 / GRUB_DISK_SECTOR_SIZE;
+
   if (argc < 2)
     return grub_error (GRUB_ERR_BAD_ARGUMENT, N_("filename expected"));
 
@@ -127,6 +134,7 @@ grub_cmd_loopback (grub_extcmd_context_t ctxt, int argc, char **args)
 
   /* Add the new entry to the list.  */
   newdev->next = loopback_list;
+  newdev->offset = offset;
   loopback_list = newdev;
 
   return 0;
@@ -166,11 +174,16 @@ grub_loopback_open (const char *name, grub_disk_t disk)
     return grub_error (GRUB_ERR_UNKNOWN_DEVICE, "can't open device");
 
   /* Use the filesize for the disk size, round up to a complete sector.  */
-  if (dev->file->size != GRUB_FILE_SIZE_UNKNOWN)
+  if (dev->file->size != GRUB_FILE_SIZE_UNKNOWN) {
+    if (dev->file->size < dev->offset * GRUB_DISK_SECTOR_SIZE) {
+      return grub_error(GRUB_ERR_BAD_ARGUMENT, "file is too small");
+    }
+    /*else*/
     disk->total_sectors = ((dev->file->size + GRUB_DISK_SECTOR_SIZE - 1)
-			   / GRUB_DISK_SECTOR_SIZE);
-  else
+			   / GRUB_DISK_SECTOR_SIZE - dev->offset);
+  } else {
     disk->total_sectors = GRUB_DISK_SIZE_UNKNOWN;
+  }
   /* Avoid reading more than 512M.  */
   disk->max_agglomerate = 1 << (29 - GRUB_DISK_SECTOR_BITS
 				- GRUB_DISK_CACHE_BITS);
@@ -186,10 +199,12 @@ static grub_err_t
 grub_loopback_read (grub_disk_t disk, grub_disk_addr_t sector,
 		    grub_size_t size, char *buf)
 {
-  grub_file_t file = ((struct grub_loopback *) disk->data)->file;
+  struct grub_loopback *dev = (struct grub_loopback *) disk->data;
+  grub_file_t file = dev->file;
+
   grub_off_t pos;
 
-  grub_file_seek (file, sector << GRUB_DISK_SECTOR_BITS);
+  grub_file_seek (file, (sector + dev->offset) << GRUB_DISK_SECTOR_BITS);
 
   grub_file_read (file, buf, size << GRUB_DISK_SECTOR_BITS);
   if (grub_errno)
@@ -198,7 +213,7 @@ grub_loopback_read (grub_disk_t disk, grub_disk_addr_t sector,
   /* In case there is more data read than there is available, in case
      of files that are not a multiple of GRUB_DISK_SECTOR_SIZE, fill
      the rest with zeros.  */
-  pos = (sector + size) << GRUB_DISK_SECTOR_BITS;
+  pos = (sector + dev->offset + size) << GRUB_DISK_SECTOR_BITS;
   if (pos > file->size)
     {
       grub_size_t amount = pos - file->size;
