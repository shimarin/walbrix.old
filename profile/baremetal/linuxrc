#!/bin/sh
[ ! -e /dev/console ]  && mknod /dev/console c 5 1
exec >/dev/console </dev/console 2>&1

mount -t proc -o noexec,nosuid,nodev proc /proc
mount -t devtmpfs -o "exec,nosuid,mode=0755,size=10M" udev /dev
mount -t sysfs sysfs /sys -o noexec,nosuid,nodev

busybox --install -s

CMDLINE=$(cat /proc/cmdline)
for x in ${CMDLINE}
do
	case "${x}" in
		boot_partition_uuid=*)
			BOOT_PARTITION_UUID=${x#*=}
		;;
		dolvm)
			USE_LVM_NORMAL=1
		;;
	esac
done

if [ "${USE_LVM_NORMAL}" = '1' ]; then
	vgchange -ay --sysinit
	vgmknodes --ignorelockingfailure
fi

echo "Determining boot partition(supposed to contain system image)..."
if [ -n "${BOOT_PARTITION_UUID}" ]; then
	RETRY_COUNT=1
	until BOOT_PARTITION=$(blkid -U "${BOOT_PARTITION_UUID}") || [ $RETRY_COUNT -eq 8 ]; do
	   echo "Retrying..."
	   sleep $(( RETRY_COUNT++ ))
	done
fi

if [ -b "${BOOT_PARTITION}" ]; then
	echo "Boot partition is ${BOOT_PARTITION}"
else
	BOOT_PARTITION=/dev/sda1
	if [ ! -b $BOOT_PARTITION ]; then
		BOOT_PARTITION=/dev/sda
	fi
	echo "Boot partition could not be determined automatically. Attempting $BOOT_PARTITION ."
fi

echo "Determining boot partition filesystem type..."
BOOT_PARTITION_FSTYPE=`blkid ${BOOT_PARTITION} | sed 's/.*TYPE="\([^"]\+\).*/\1/'`
echo "The filesystem type is ${BOOT_PARTITION_FSTYPE}."

echo "Mounting boot partition..."
mkdir /mnt/boot
mount -o fmask=177,dmask=077 "${BOOT_PARTITION}" /mnt/boot || exec sh

echo "Checking previously running system image..."
if [ -f /mnt/boot/system.cur ];then
  if mv -f /mnt/boot/system.cur /mnt/boot/system.old; then
	  echo "Previous system image preserved."
	fi
fi

if [ -f /mnt/boot/system.swp ]; then
	echo "Activating swap(system.swp)..."
	mkswap /mnt/boot/system.swp
	swapon /mnt/boot/system.swp
fi

echo "Setup RW layer..."
mkdir /mnt/rw

if [ -f /mnt/boot/system.dat ]; then
	echo "Mounting data file(system.dat)..."
	if mount -o rw,loop /mnt/boot/system.dat /mnt/rw; then
		RW_LAYER_READY=true
	else
		echo "Data partition mount failed."
	fi
fi

if [ "${RW_LAYER_READY}" != "true" ]; then
	echo "Mounting RAM RW layer..."
	if ! mount -t tmpfs tmpfs /mnt/rw; then
		echo "Mounting RAM RW layer failed."
		exec sh
	fi
fi

echo "Mounting system image..."
mkdir /mnt/system
mount -o loop,ro /mnt/boot/system.img /mnt/system || exec sh

echo "Mounting overlay..."
rm -rf /mnt/rw/work #cleanup
mkdir -p /mnt/rw/root /mnt/rw/work
rm -rf /mnt/rw/root/tmp /mnt/rw/root/var/tmp # cleanup temporary dirs
rm -f /mnt/rw/root/etc/mtab # mtab should always point /proc/mounts
rm -f /mnt/rw/root/etc/ld.so.cache # https://github.com/wbrxcorp/walbrix/issues/16
mkdir -p /newroot
mount -t overlay -o lowerdir=/mnt/system,upperdir=/mnt/rw/root,workdir=/mnt/rw/work overlay /newroot || exec sh
mount -t tmpfs -o mode=755,nodev,nosuid,strictatime tmpfs /newroot/run

if [ -f /mnt/boot/earlydebug ]; then
	exec sh
fi

# https://github.com/systemd/systemd/blob/master/docs/INITRD_INTERFACE.md
echo "Moving mountponts under newroot..."
mkdir -p /newroot/run/initramfs/boot && mount --move /mnt/boot /newroot/run/initramfs/boot || exec sh
mkdir -p /newroot/run/initramfs/ro && mount --move /mnt/system /newroot/run/initramfs/ro || exec sh
mkdir -p /newroot/run/initramfs/rw && mount --move /mnt/rw /newroot/run/initramfs/rw || exec sh
mount --move /dev /newroot/dev || exec sh
mount --move /sys /newroot/sys || exec sh
mount --move /proc /newroot/proc || exec sh

touch /newroot/run/initramfs/.lock # lockfile for update process

mkdir -p /newroot/run/initramfs/bin
cp -a /bin/busybox /newroot/run/initramfs/bin/busybox
ln -s busybox /newroot/run/initramfs/bin/sh
cat > /newroot/run/initramfs/shutdown << "EOS"
#!/bin/sh
ACTION=$1
busybox mkdir -p /usr/bin /sbin /usr/sbin /mnt
busybox --install -s
mount --move /oldroot/run /mnt
for i in $(egrep '^.+\s/oldroot(\/|\s)' /proc/mounts | awk '{print $2}' | sort -r); do
	umount $i
done
for i in rw ro boot; do
	umount /mnt/initramfs/$i
done

$ACTION -f
EOS
chmod +x /newroot/run/initramfs/shutdown

if [ -f /newroot/run/initramfs/boot/debug ]; then
	echo "'exec switch_root /newroot /sbin/init' to switch root"
	exec sh
fi
#else

echo "Switching to newroot..."
rm -rf /lib /usr/sbin
exec /sbin/switch_root /newroot /sbin/init
